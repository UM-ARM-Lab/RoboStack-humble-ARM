diff --git a/CMakeLists.txt b/CMakeLists.txt
index 48123e6..f0cecc7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -21,18 +21,25 @@ endif()
 set(RPLIDAR_SDK_PATH "./sdk/")
 
 if(APPLE)
-add_compile_definitions(_MACOS)
-FILE(GLOB RPLIDAR_SDK_SRC
-  "${RPLIDAR_SDK_PATH}/src/arch/macOS/*.cpp"
-  "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
-  "${RPLIDAR_SDK_PATH}/src/*.cpp"
-)
+  add_compile_definitions(_MACOS)
+  FILE(GLOB RPLIDAR_SDK_SRC
+    "${RPLIDAR_SDK_PATH}/src/arch/macOS/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/*.cpp"
+  )
+elseif(WIN32)
+  add_compile_definitions(_USE_MATH_DEFINES)
+  FILE(GLOB RPLIDAR_SDK_SRC 
+    "${RPLIDAR_SDK_PATH}/src/arch/win32/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/*.cpp"
+  )
 else()
-FILE(GLOB RPLIDAR_SDK_SRC 
-  "${RPLIDAR_SDK_PATH}/src/arch/linux/*.cpp"
-  "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
-  "${RPLIDAR_SDK_PATH}/src/*.cpp"
-)
+  FILE(GLOB RPLIDAR_SDK_SRC 
+    "${RPLIDAR_SDK_PATH}/src/arch/linux/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/hal/*.cpp"
+    "${RPLIDAR_SDK_PATH}/src/*.cpp"
+  )
 endif()
 
 ################################################################################
diff --git a/sdk/Makefile b/sdk/Makefile
index 81215d9..69aec97 100644
--- a/sdk/Makefile
+++ b/sdk/Makefile
@@ -60,6 +60,12 @@ CXXSRC += src/arch/macOS/net_serial.cpp \
           src/arch/macOS/timer.cpp
 endif
 
+ifeq ($(BUILD_TARGET_PLATFORM),Windows)
+CXXSRC += src/arch/windows/net_serial.cpp \
+          src/arch/windows/net_socket.cpp \
+          src/arch/windows/timer.cpp
+endif
+
 all: build_sdk
 
 include $(HOME_TREE)/mak_common.inc
diff --git a/sdk/src/arch/macOS/net_socket.cpp b/sdk/src/arch/macOS/net_socket.cpp
index f7ddfbf..153de6d 100644
--- a/sdk/src/arch/macOS/net_socket.cpp
+++ b/sdk/src/arch/macOS/net_socket.cpp
@@ -754,6 +754,26 @@ public:
 
     }
 
+    virtual u_result clearRxCache()
+    {
+        timeval tv;
+        tv.tv_sec = 0;
+        tv.tv_usec = 0;
+        fd_set rdset;
+        FD_ZERO(&rdset);
+        FD_SET(_socket_fd, &rdset);
+
+        int res = -1;
+        char recv_data[2];
+        memset(recv_data, 0, sizeof(recv_data));
+        while (true) {
+            res = select(FD_SETSIZE, &rdset, nullptr, nullptr, &tv);
+            if (res == 0) break;
+            recv(_socket_fd, recv_data, 1, 0);
+        }
+        return RESULT_OK;
+    }
+
     virtual u_result recvFrom(void *buf, size_t len, size_t & recv_len, SocketAddress * sourceAddr)
     {
         struct sockaddr * addr = (sourceAddr?reinterpret_cast<struct sockaddr *>(const_cast<void *>(sourceAddr->getPlatformData())):NULL);
